package oopEx.inheritance;


/*
 * 상속수업에 관련한 Super 클래스인 Animal 클래스를 정의 합니다.
 * 이 클래스는 필드를 딱 하나만 가지고 있는데 , 하위클래스( 자식클래스 ) 가 객체화 될시 
 * 어떤 타입의 객체가 생성 되었는지를 나타내는 type 필드 입니다. 
 * 
 */

/* 
 * 자바의 추상화 (Abstraction) : 상속 관계에서 특정 클래스의 목적이 자신의 인스턴스(객체)를 목적으로 하지 않고 
 * 단지 상속 만을 위해 존재하는 경우 (메서드or필드)에 해당 클래스를 추상클래스화 할수 있다.
 * 대부분 특정 메서드를 자식들이 오버라이드 하도록 할떄 설계되는 클래스이다.
 * 추상 클래스는 abstract 라는 키워드를 통해서 선언할수 있으며 , 추상 메서드를 하나이상 가지게 되는 클래스는
 * 무조건 추상 클래스로 선언이 되어야 한다.
 * 추상 메서드는 상속을 통한 오버라이드만을 목적으로 하는 메서드로 메서드 내용부 자체는 필요가 없기에 , {} 빠진 형태로
 * 메서드만 선언하는 형태이다. 단 ,선언이기 떄문에 ; 을 꼭 넣어줘야 한다 
 * 이렇게 선언된 추상 클래스 이후 부터는 자신의 Instance 를 생성 할 수 없는 상태가 된다 (중요)
 * 하지만 하위 타입의 객체 Ref 할수 있는 타입으로는 존재 할 수 있다. 
 * 추상 클래스를 상속받은 자식 (하위) 클래스들은 상속 받은 추상 메서드를 반드시 재정의(오버라이드)해야 한다.
 * 만약 하지 않을시엔 자신도 추상 클래스화 되어야 한다.
 * 이처럼 추상 메서드를 자식이 강제로 오버라이드 하도록 하는 목적이 추상화의 또다른 개념이다.
 * 추상 클래스는 자신의 인스턴스를 생성하지 못하는것 외엔 일반 클래스와 깉이 모든걸 정의 할 수 있다.
 * 
 */
// 바디가 있다 없다의 기준 <추상 메서드>  하지만 ; 세미콜론은 들어가야함  리턴타잎 앞에 Abstract 기재해야함 
/*
 * final : final 은 필드, 메서드 ,메서드파라미터에 사용 가능합니다. 
 * 필드에 쓰이면 상수화 즉 값 변경 불가, 메서드에 사용되면 오버라이드 금지, 메서드파라미터에 쓰이면 해당 메서드 바디에서 
 * 값 변경 불가입니다.
 */
public abstract class Animal { //아래 추상메서드를 정의했기에 자신도 추상클래스가 되어야한다 

	String type; //동물중 어떤 동물 타입인지를 나타내는 필드.
	
	//자식클래스의 객체 (dog,dat,duck) 가 생성될 떄 타입(dog,cat,duck)결정을 해주도록 생성자 정의 합니다.

	
	public Animal(String type) {
		this.type = type;
		
	}
	
	
	public String toString() {
		return "이것은"+ type + "입니다"; 
				
	}
	
	//소리를 내는 공통 기능인 sound()를 정의해 봅니다.
	
	
	//추상화메서드의 대상이됨..즉..Animal 자체는 현실에 존재할 수 없기에 소리도 구체화 될수 없다.
	public abstract void sound();
	
	//메서드파리미터에서의 final 예제 메서드 정의 합니다.
	public void dosome(final int a) {
		//a = 100;
	}
		// 이전내역 
		//public abstract void sound(){
		//System.out.println("늬들이 알아서 소리내!!");		
		//}
	
		
}

